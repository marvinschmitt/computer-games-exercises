[gd_scene load_steps=8 format=2]

[sub_resource type="PlaneMesh" id=1]
subdivide_width = 64
subdivide_depth = 64

[sub_resource type="Shader" id=2]
code = "// author: Marvin Schmitt
// coauthor list: Daniel Knoll

shader_type spatial;
render_mode specular_toon;

uniform float height_scale = 0.5;
uniform sampler2D noise;
uniform sampler2D normalmap;

const float PI = 3.14159265358979323846;

varying vec2 tex_position;

float wave(vec2 position){
  position += texture(noise, position / 10.0).x * 2.0 - 1.0;
  vec2 wv = 1.0 - abs(sin(position));
  return pow(1.0 - pow(wv.x * wv.y, 0.65), 4.0);
}

float height(vec2 position, float time) {
  float d = wave((position + time) * 0.4) * 0.3;
  d += wave((position - time) * 0.3) * 0.3;
  d += wave((position + time) * 0.5) * 0.2;
  d += wave((position - time) * 0.6) * 0.2;
  return d;
}


float q(float x){
	return pow(x, 2);
}

void vertex() {
	vec2 uv = UV;
	float a = 1.0;
	float b = 0.8;
	float c = 0.7;

    /*float mask = (q(VERTEX.x)/q(a) + q(VERTEX.z)/q(b)) < 1.0 ? 1.0 : 0.0;
	
	VERTEX.x *= mask;
	VERTEX.z *= mask;
	*/
	VERTEX.x =  a * sin(UV.x * PI) * cos(UV.y * PI);
	VERTEX.y =  c * cos(UV.x * PI);
	VERTEX.z =  b * sin(UV.x * PI) * sin(UV.y * PI);


	tex_position = VERTEX.xz / 2.0 + 0.5;
  	VERTEX.y += texture(noise, tex_position).x  * height_scale;
  	vec2 pos = VERTEX.xz;
  	float k = height(pos, TIME);
  	VERTEX.y = k;
	NORMAL = normalize(vec3(k - height(pos + vec2(0.1, 0.0), TIME), 0.1, k - height(pos + vec2(0.0, 0.1), TIME)));
}

void fragment() {
  NORMALMAP = texture(normalmap, tex_position).xyz;
  float fresnel = sqrt(1.0 - dot(NORMAL, VIEW));
  RIM = 0.2;
  METALLIC = 0.0;
  ROUGHNESS = 0.01 * (1.0 - fresnel);
  ALBEDO = vec3(0.01, 0.03, 0.05) + (0.1 * fresnel);
}

"

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
noise = SubResource( 4 )

[sub_resource type="OpenSimplexNoise" id=6]

[sub_resource type="NoiseTexture" id=7]
as_normalmap = true
noise = SubResource( 6 )

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/height_scale = 0.5
shader_param/noise = SubResource( 5 )
shader_param/normalmap = SubResource( 7 )

[node name="Spatial" type="Spatial"]

[node name="MeshInstance" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0.559721 )
mesh = SubResource( 1 )
material/0 = SubResource( 3 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.927184, -0.128123, 0.352015, 0, 0.939693, 0.34202, -0.374607, -0.317116, 0.871268, 0.905, 1, 2.1 )
fov = 56.0877

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.766953, -0.596433 )
